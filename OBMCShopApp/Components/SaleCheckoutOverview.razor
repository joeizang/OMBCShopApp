@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using OBMCShopApp.Services
@using OBMCShopApp.ViewModels
@using Humanizer
@inject ILocalStorageService BrowserStorage
@inject ISaleService SaleService
@implements IDisposable

@if (ProductsSold.Count > 0)
{
    <div>
        <button class="btn btn-warning" @onclick="@ShowModal">
            <span>Finish Sale</span>
            <span class="badge badge-pill badge-light"><b>@saleCart?.Products.Count</b></span>
        </button>
    </div>
}
else
{
    <div>
        <button class="btn btn-warning" disabled>
            <span>Nothing added yet!</span>
        </button>
    </div>
}
<SfDialog  Width="50%" IsModal="true" @bind-Visible="@_showModal" ShowCloseIcon="true">
    <DialogTemplates>
        <Header><h3 class="h3 text-center">Finish Sale</h3></Header>
        <Content>
            <SaleCheckout SalePayload="@saleCart"
              RemoveCart="RemoveCurrentCart"
              FinishSale="FinishSale"
            />
        </Content>
    </DialogTemplates>
</SfDialog>


@code {
    private List<ProductSoldViewModel> ProductsSold { get; set; } = new();
    private CreateSaleInputModel saleCart;

    private bool _showModal = false;
    protected override async Task OnInitializedAsync()
    {
        SaleService.OnChange += StateHasChanged;
        var temp = await BrowserStorage
                    .GetItemAsync<CreateSaleInputModel>("cart");
        saleCart = temp is not null ? temp : new();
        ProductsSold = saleCart.Products;
    }

    private void ShowModal()
    {
        if (_showModal is false)
            _showModal = true;
        else
            _showModal = false;
    }

    private async Task<int> CountProductsInCart()
    {
        var cart = await BrowserStorage
                    .GetItemAsync<CreateSaleInputModel>("cart");
        return cart?.Products.Count ?? 0;
    }

    private async Task RemoveCurrentCart()
    {
        await BrowserStorage.RemoveItemAsync("cart");
    }

    private async Task FinishSale()
    {
        Console.WriteLine("Finish Sale!!");
    }

    public void Dispose()
    {
        SaleService.OnChange -= StateHasChanged;
    }
}