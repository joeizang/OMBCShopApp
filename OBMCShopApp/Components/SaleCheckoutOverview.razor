@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using OBMCShopApp.Services
@using OBMCShopApp.ViewModels
@using Humanizer
@inject ILocalStorageService BrowserStorage
@inject SaleService SaleService
@implements IDisposable

@if (GetCartCount() > 0)
{
    <div>
        <button class="btn btn-warning" @onclick="@ShowModal">
            <span>Finish Sale</span>
            <span class="badge badge-pill badge-light"><b>@GetCartCount()</b></span>
        </button>
    </div>
}
else
{
    <div>
        <button class="btn btn-warning" disabled>
            <span>Nothing added yet!</span>
        </button>
    </div>
}
<SfDialog Width="75%" IsModal="true" @bind-Visible="@_showModal" ShowCloseIcon="true">
    <DialogTemplates>
        <Header><h3 class="h3">Finish Sale</h3></Header>
        <Content>
            <SaleCheckout SalePayload="@SaleCart"></SaleCheckout>
        </Content>
    </DialogTemplates>
</SfDialog>


@code {
    private List<ProductSoldViewModel> ProductsSold { get; set; } = new();
    private CreateSaleInputModel SaleCart { get; set; } = new();
    private bool _showModal = false;
    protected override async Task OnInitializedAsync()
    {
        SaleService.OnChange += StateHasChanged;
        var saleState = await BrowserStorage.GetItemAsync<CreateSaleInputModel>("cart");
    }

    private int GetCartCount()
    {
        // Task.Run(async () =>
        // {
        //     var result = await BrowserStorage.GetAsync<CreateSaleInputModel>("cart");
        //     if (!result.Success) return 1;
        //     SaleCart = result.Value;
        //     ProductsSold = SaleCart?.Products;
        //     return 1;
        // });

        return 1;
    }

    private void ShowModal()
    {
        if (_showModal is false)
            _showModal = true;
        else
            _showModal = false;
    }

    public void Dispose()
    {
        SaleService.OnChange -= StateHasChanged;
    }
}